#!/bin/bash
# Giant AI Dev Project Initialization - LLM-agnostic project setup
# Creates .ai-setup directory with context and conventions

set -e

PROJECT_DIR="${1:-$(pwd)}"
AI_CONFIG_DIR="$PROJECT_DIR/.ai-setup"

echo "Giant AI Dev Project Initialization"
echo "============================"
echo "Project directory: $PROJECT_DIR"
echo ""

# Offer smart initialization option
echo "Initialization options:"
echo "1. Smart initialization (auto-detects language/framework)"
echo "2. Basic initialization (templates with placeholders)"
echo ""
read -p "Choose option (1/2, default: 1): " -n 1 -r
echo ""

if [[ $REPLY =~ ^[2]$ ]]; then
    echo "Using basic initialization..."
    echo ""
else
    echo "Using smart initialization..."
    exec "$(dirname "$0")/ai-init-project-smart" "$PROJECT_DIR"
fi

# Create project .ai-setup directory
mkdir -p "$AI_CONFIG_DIR"

# Create project-specific context file if it doesn't exist
if [ ! -f "$AI_CONFIG_DIR/context.md" ]; then
    echo "Creating project context file..."
    cat > "$AI_CONFIG_DIR/context.md" << 'EOF'
# Project Context

## Overview
[Describe your project here - its purpose, main features, and target users]

## Architecture
[Describe the high-level architecture - main components, data flow, key technologies]

## Development Guidelines

### Code Style
- [Add project-specific code style guidelines]
- [Naming conventions]
- [File organization patterns]

### Testing Strategy
- [Unit test requirements]
- [Integration test approach]
- [E2E test coverage]

### Performance Considerations
- [Key performance metrics]
- [Optimization priorities]
- [Resource constraints]

## Current Focus
- [What are you currently working on?]
- [Any specific areas that need attention?]
- [Known issues or technical debt?]

## AI Assistant Instructions

### When generating code:
- [Project-specific patterns to follow]
- [Libraries/frameworks to use or avoid]
- [Security considerations]

### When reviewing code:
- [What to look for]
- [Common pitfalls in this codebase]
- [Performance hotspots to consider]

### When debugging:
- [Common issues in this project]
- [Debugging tools and techniques]
- [Logging patterns]
EOF
    echo "âœ… Created context.md"
else
    echo "âœ“ context.md already exists"
fi

# Create conventions file if it doesn't exist
if [ ! -f "$AI_CONFIG_DIR/conventions.yml" ]; then
    echo "Creating conventions file..."
    cat > "$AI_CONFIG_DIR/conventions.yml" << 'EOF'
# Project Conventions
naming:
  files: kebab-case  # or camelCase, PascalCase, snake_case
  components: PascalCase
  functions: camelCase
  constants: UPPER_SNAKE_CASE

structure:
  src_layout: feature  # or layer (controllers/models/views)
  test_location: alongside  # or separate (__tests__ folder)
  
code_style:
  max_line_length: 100
  indent: spaces  # or tabs
  indent_size: 2
  quotes: single  # or double
  semicolons: false  # JS/TS specific
  
git:
  branch_naming: feature/ticket-description
  commit_style: conventional  # conventional commits
  
dependencies:
  package_manager: npm  # or yarn, pnpm, cargo, pip, etc.
  version_strategy: exact  # or caret, tilde
EOF
    echo "âœ… Created conventions.yml"
else
    echo "âœ“ conventions.yml already exists"
fi

# Create .gitignore entries if needed
if [ -f "$PROJECT_DIR/.gitignore" ]; then
    if ! grep -q ".ai-setup/rag/" "$PROJECT_DIR/.gitignore"; then
        echo "" >> "$PROJECT_DIR/.gitignore"
        echo "# Giant AI Dev local files" >> "$PROJECT_DIR/.gitignore"
        echo ".ai-setup/rag/db/" >> "$PROJECT_DIR/.gitignore"
        echo "âœ… Added Giant AI Dev entries to .gitignore"
    else
        echo "âœ“ .gitignore already has Giant AI Dev entries"
    fi
fi

# Ask if user wants to index the project now
echo ""
read -p "Would you like to index this project for semantic search now? (y/N) " -n 1 -r
echo ""
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Indexing project..."
    ai-rag index "$PROJECT_DIR"
fi

echo ""
echo "ðŸŽ‰ Project initialization complete!"
echo ""
echo "Next steps:"
echo "1. Edit $AI_CONFIG_DIR/context.md to describe your project"
echo "2. Edit $AI_CONFIG_DIR/conventions.yml to match your project's conventions"
echo "3. Run 'ai-rag index $PROJECT_DIR' to index/reindex the codebase"
echo ""
echo "The AI assistant will now have access to:"
echo "- Project-specific context and guidelines"
echo "- Semantic search across your codebase"
echo "- Your coding conventions and patterns"